import time
from mpi4py import MPI
import numpy as np
from numpy.linalg import norm
import sys
import matplotlib.pyplot as plt

np.random.seed(42)

comm = MPI.COMM_WORLD
rank = comm.Get_rank()
size = comm.Get_size()

MATRIX_SIZE = 2 ** 13
MATRIX_SPLIT = int(sys.argv[1])

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã A
a = np.zeros((MATRIX_SIZE, MATRIX_SIZE), dtype=np.double)
for i in range(MATRIX_SIZE):
    for j in range(MATRIX_SIZE):
        if i == j:
            a[i, j] = 2
        else:
            a[i, j] = 1

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ b –∏ x
b = np.ones(MATRIX_SIZE, dtype=np.double) * (2 ** 13 + 1)
x = np.zeros(MATRIX_SIZE, dtype=np.double)

epsilon = 0.00001


def mult_matrix_by_vector(m, v):
    v = v[:, None]
    #—Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–∫–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    part_a = np.empty(shape=(MATRIX_SIZE // MATRIX_SPLIT,
                             MATRIX_SIZE), dtype=np.double)
    # –ø–µ—Ä–µ–¥–∞—á–∞ —á–∞—Å—Ç–µ–π –Ω–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    comm.Scatter(m, part_a, root=0)
#–æ–ø–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—ã ùëùùëéùëüùë°ùëé –Ω–∞ –≤–µ–∫—Ç–æ—Ä ùë£.
#–†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–º–Ω–æ–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ –≤–µ–∫—Ç–æ—Ä ùë•.
    part_a = part_a @ v
    res = None
    if rank == 0:
        res = np.empty(shape=(MATRIX_SIZE, 1), dtype=np.double)
    # —Å–±–æ—Ä —á–∞—Å—Ç–µ–π
    comm.Gather(part_a, res, root=0)

    return comm.bcast(res, root=0).T[0]


def main():
    global x

    # –†–∞–∑—Ä–µ–∑–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ b
    local_b = np.empty(MATRIX_SIZE // size, dtype=np.double)
    comm.Scatter(b, local_b, root=0)

    # –†–∞–∑—Ä–µ–∑–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ x
    local_x = np.zeros(MATRIX_SIZE // size, dtype=np.double)

    old_crit = 0
    i = 0
    #–∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    while True:
        i += 1
        y = mult_matrix_by_vector(a, x) - local_b  # –ò—Å–ø–æ–ª—å–∑—É–µ–º local_b
        ay = mult_matrix_by_vector(a, y)
        flag = False
        #–∫—Ä–∏—Ç–µ—Ä–∏–π —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if rank == 0:
            crit = norm(y) / norm(b)
            if crit < epsilon or crit == old_crit:
                flag = True
            else:
                old_crit = crit
                tao = (y.dot(ay)) / (ay.dot(ay))
                x = x - tao * y

        if comm.bcast(flag, root=0):
            break
        x = comm.bcast(x, root=0)


if __name__ == '__main__':
    time_results = []
    for cores in [1, 2, 4, 8, 16]:
        if rank == 0:
            t_start = time.time()
        main()
        if rank == 0:
            elapsed_time = time.time() - t_start
            time_results.append(elapsed_time)
            print(f"–ß–∏—Å–ª–æ —è–¥–µ—Ä: {cores}, –í—Ä–µ–º—è: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if rank == 0:
        speedup = [time_results[0] / t for t in time_results]
        efficiency = [s / p for s, p in zip(speedup, [1, 2, 4, 8, 16])]

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        plt.figure(figsize=(10, 6))
        plt.subplot(1, 3, 1)
        plt.plot([1, 2, 4, 8, 16], time_results, marker='o', color='b', label='–í—Ä–µ–º—è')
        plt.xlabel("–ß–∏—Å–ª–æ —è–¥–µ—Ä")
        plt.ylabel("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å)")
        plt.title("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞ —è–¥–µ—Ä")
        plt.grid()

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        plt.subplot(1, 3, 2)
        plt.plot([1, 2, 4, 8, 16], speedup, marker='o', color='g', label='–£—Å–∫–æ—Ä–µ–Ω–∏–µ')
        plt.xlabel("–ß–∏—Å–ª–æ —è–¥–µ—Ä")
        plt.ylabel("–£—Å–∫–æ—Ä–µ–Ω–∏–µ")
        plt.title("–£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞ —è–¥–µ—Ä")
        plt.grid()

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        plt.subplot(1, 3, 3)
        plt.plot([1, 2, 4, 8, 16], efficiency, marker='o', color='r', label='–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
        plt.xlabel("–ß–∏—Å–ª–æ —è–¥–µ—Ä")
        plt.ylabel("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        plt.title("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞ —è–¥–µ—Ä")
        plt.grid()

        plt.tight_layout()
        plt.show()
