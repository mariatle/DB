-- 1) Создать базу данных (если еще не создана)
IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'SKI_RENT')
BEGIN
    CREATE DATABASE SKI_RENT
    ON 
    PRIMARY (
        NAME = SKI_RENT,
        FILENAME = 'D:\SKI_RENT.mdf',
        SIZE = 10MB,
        MAXSIZE = 100MB,
        FILEGROWTH = 1MB
    )
    LOG ON (
        NAME = SKI_RENT_Log,
        FILENAME = 'D:\SKI_RENT.ldf',
        SIZE = 5MB,
        MAXSIZE = 25MB,
        FILEGROWTH = 1MB
    );
END
GO

-- 2) Создать произвольную таблицу
USE [SKI_RENT];
IF OBJECT_ID('dbo.CUSTOMERS', 'U') IS NOT NULL
    DROP TABLE dbo.CUSTOMERS;
GO

CREATE TABLE dbo.CUSTOMERS (
    CustomerId INT NOT NULL PRIMARY KEY, 
    PhoneNumber NVARCHAR(15) NOT NULL,             
    Name NVARCHAR(50) NOT NULL,           
    Surname NVARCHAR(50) NOT NULL,        
    Patronymic NVARCHAR(50),              
    Location NVARCHAR(50) NOT NULL,       
    Email NVARCHAR(50) NOT NULL           
);
GO

-- 3) Добавить файловую группу
ALTER DATABASE SKI_RENT 
ADD FILEGROUP FG_CUSTOMERS;
GO

-- 3.1) Добавить файл данных в новую файловую группу
ALTER DATABASE SKI_RENT 
ADD FILE (
    NAME = SKI_RENT_Customers_Data,
    FILENAME = 'D:SKI_RENT_Customers_Data.ndf',
    SIZE = 5MB,
    MAXSIZE = 50MB,
    FILEGROWTH = 5MB
) TO FILEGROUP FG_CUSTOMERS;
GO

-- 4) Создать еще одну произвольную таблицу.
USE [SKI_RENT];
IF OBJECT_ID('dbo.RENTAL_AGREEMENTS', 'U') IS NOT NULL
    DROP TABLE dbo.RENTAL_AGREEMENTS;
GO

CREATE TABLE dbo.RENTAL_AGREEMENTS (
    AgreementId INT NOT NULL PRIMARY KEY,
    CustomerId INT NOT NULL,
    DateOfAgreement NVARCHAR(50) NOT NULL,
    RentalStartDate DATETIME NOT NULL,
    RentalEndDate DATETIME NOT NULL,
    TotalPrice DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (CustomerId) REFERENCES dbo.CUSTOMERS(CustomerId)
) ON FG_CUSTOMERS;  -- Указываем, что таблица будет создана в файловой группе FG_CUSTOMERS
GO

-- 5) Удаление созданной вручную файловой группы.
-- Сначала удаляем таблицы, которые находятся в этой файловой группе
IF OBJECT_ID('dbo.RENTAL_AGREEMENTS', 'U') IS NOT NULL
    DROP TABLE dbo.RENTAL_AGREEMENTS;

IF OBJECT_ID('dbo.CUSTOMERS', 'U') IS NOT NULL
    DROP TABLE dbo.CUSTOMERS;

-- Затем удаляем файл из файловой группы
ALTER DATABASE SKI_RENT 
REMOVE FILE SKI_RENT_Customers_Data; 
GO

-- Удаляем файловую группу FG_CUSTOMERS
ALTER DATABASE SKI_RENT 
REMOVE FILEGROUP FG_CUSTOMERS; 
GO

-- 6) Создание схемы и перенос таблицы
IF SCHEMA_ID(N'GymSchema') IS NOT NULL
    DROP SCHEMA GymSchema;
GO

CREATE SCHEMA GymSchema;
GO

-- Перемещение таблицы RENTAL_AGREEMENTS в новую схему
-- Поскольку таблица RENTAL_AGREEMENTS была удалена ранее, мы не можем её переименовать или переместить.
-- Вместо этого мы можем создать новую таблицу в новой схеме.

CREATE TABLE GymSchema.Client (
    AgreementId INT NOT NULL PRIMARY KEY,
    CustomerId INT NOT NULL,
    DateOfAgreement NVARCHAR(50) NOT NULL,
    RentalStartDate DATETIME NOT NULL,
    RentalEndDate DATETIME NOT NULL,
    TotalPrice DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (CustomerId) REFERENCES dbo.CUSTOMERS(CustomerId)
);
GO

-- Удаляем таблицу из схемы перед удалением схемы
IF OBJECT_ID(N'GymSchema.Client', 'U') IS NOT NULL
    DROP TABLE GymSchema.Client;
GO

-- Удаляем схему
DROP SCHEMA GymSchema;
GO















-- 1) Создаем базу данных

if DB_ID('SMART_HOME') is null
begin
    create database SMART_HOME
    on primary
    (
        name = 'SMART_HOME',
        filename = '/Users/vsevolond/university/DB_2016/lab5/SmartHomeData_df.mdf',
        size = 10MB,
        maxsize = 100MB,
        filegrowth = 10MB
    )
end
go

-- 2) Создаем таблицу клиента

use [SMART_HOME]

if not exists (select 1 from INFORMATION_SCHEMA.TABLES where TABLE_NAME = 'CLIENT')
begin
    create table CLIENT
    (
        [client_id] int identity (1, 1) primary key,
        [phone_number] varchar(20) not null,
        [name] varchar(20) not null,
        [surname] varchar(20) not null,
        [birth_date] date
        constraint CLIENT_AK1 unique (phone_number)
    )
end
go

-- 3) Создаем файловую группу

alter database [SMART_HOME]
add filegroup SMARTHOME_FILEGROUP
go

-- Создаем файл данных

alter database [SMART_HOME]
add file
(
    name = 'smarthome_data',
    filename = '/Users/vsevolond/university/DB_2016/lab5/smarthome_df.mdf'
)
to filegroup SMARTHOME_FILEGROUP;
go

-- 4) Делаем созданную файловую группу файловой группой по умолчанию
alter database [SMART_HOME]
modify filegroup SMARTHOME_FILEGROUP default
go

-- 5) Создадим еще одну таблицу
if not exists (select 1 from INFORMATION_SCHEMA.TABLES where TABLE_NAME = 'ACCOUNT')
    begin
        create table ACCOUNT
        (
            [account_id] int identity (1, 1) primary key,
            [email] varchar(100) unique not null,
            [users_count_limit] tinyint default 5,
            [last_login_date] date not null,
            [create_date] date default GETDATE(),
            [creator_id] int not null
        )
    end
go

-- Создаем новую таблицу в PRIMARY для переноса данных
create table ACCOUNT_NEW
(
    [account_id] int identity (1, 1) primary key,
    [email] varchar(100) unique not null,
    [users_count_limit] tinyint default 5,
    [last_login_date] date not null,
    [create_date] date default GETDATE(),
    [creator_id] int not null,
    constraint ACCOUNT_AK1 unique (email),
    constraint FK_ACCOUNT_CLIENT foreign key (creator_id) references CLIENT(client_id)
) on [PRIMARY]
go

-- Переносим данные
insert into ACCOUNT_NEW (email, users_count_limit, last_login_date, create_date, creator_id)
select email, users_count_limit, last_login_date, create_date, creator_id from ACCOUNT
go

-- Удаляем таблицу
drop table ACCOUNT
go

-- Меняем название таблицы
exec sp_rename 'ACCOUNT_NEW', 'ACCOUNT'
go

-- Возвращаем дефолтное значение для PRIMARY
alter database [SMART_HOME]
modify filegroup [PRIMARY] default
go

-- Удаляем файл данных
alter database [SMART_HOME]
remove file smarthome_data
go

-- 6) Удаляем пользовательскую файловую группу
alter database [SMART_HOME]
remove filegroup SMARTHOME_FILEGROUP
go

-- 7) Создаем схему
create schema ACCOUNT_SCHEMA
go

-- Перемещаем таблицу в новую схему
alter schema ACCOUNT_SCHEMA
transfer dbo.ACCOUNT
go

-- Перемещаем таблицу в дефолтную схему, чтобы не потерять данные
alter schema dbo
transfer ACCOUNT_SCHEMA.ACCOUNT
go

drop schema ACCOUNT_SCHEMA
go
